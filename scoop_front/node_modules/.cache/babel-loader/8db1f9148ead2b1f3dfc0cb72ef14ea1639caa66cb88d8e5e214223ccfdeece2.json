{"ast":null,"code":"export function getSubFromLoginToken() {\n  const token = localStorage.getItem(\"logintoken\");\n  if (!token) {\n    console.warn(\"로그인 토큰이 존재하지 않습니다.\");\n    return \"\";\n  }\n  try {\n    cd;\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      throw new Error(\"유효하지 않은 토큰 형식입니다.\");\n    }\n    const payload = parts[1];\n    const decodedPayload = JSON.parse(atob(payload));\n    return decodedPayload.sub || \"\";\n  } catch (error) {\n    console.error(\"토큰 파싱 중 오류 발생:\", error);\n    return \"\";\n  }\n}","map":{"version":3,"names":["getSubFromLoginToken","token","localStorage","getItem","console","warn","cd","parts","split","length","Error","payload","decodedPayload","JSON","parse","atob","sub","error"],"sources":["C:/Users/admin/Documents/GitHub/project/scoop2/scoop_front/src/util/GetSubByLogintoken.js"],"sourcesContent":["export function getSubFromLoginToken() {\r\n    const token = localStorage.getItem(\"logintoken\");\r\n    if (!token) {\r\n      console.warn(\"로그인 토큰이 존재하지 않습니다.\");\r\n      return \"\";\r\n    }\r\n  \r\n    try {cd\r\n      const parts = token.split('.');\r\n      if (parts.length !== 3) {\r\n        throw new Error(\"유효하지 않은 토큰 형식입니다.\");\r\n      }\r\n      const payload = parts[1];\r\n      const decodedPayload = JSON.parse(atob(payload));\r\n      return decodedPayload.sub || \"\";\r\n    } catch (error) {\r\n      console.error(\"토큰 파싱 중 오류 발생:\", error);\r\n      return \"\";\r\n    }\r\n  }\r\n  "],"mappings":"AAAA,OAAO,SAASA,oBAAoBA,CAAA,EAAG;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAI,CAACF,KAAK,EAAE;IACVG,OAAO,CAACC,IAAI,CAAC,oBAAoB,CAAC;IAClC,OAAO,EAAE;EACX;EAEA,IAAI;IAACC,EAAE;IACL,MAAMC,KAAK,GAAGN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC;IAC9B,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;IACtC;IACA,MAAMC,OAAO,GAAGJ,KAAK,CAAC,CAAC,CAAC;IACxB,MAAMK,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,OAAO,CAAC,CAAC;IAChD,OAAOC,cAAc,CAACI,GAAG,IAAI,EAAE;EACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,OAAO,EAAE;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}