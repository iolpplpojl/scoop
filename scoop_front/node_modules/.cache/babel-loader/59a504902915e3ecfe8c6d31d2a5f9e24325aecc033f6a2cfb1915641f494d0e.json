{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\scoop\\\\scoop_front\\\\src\\\\Connector.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { Children, createContext, useActionState, useContext, useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams, useLocation } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext(null);\nconst isLoggedin = false;\nexport function Connector({\n  children\n}) {\n  _s();\n  const nav = useNavigate();\n  const [accessToken, setAccessToken] = useState(false);\n  useEffect(() => {\n    console.log(\"Connecting...\" + Math.random());\n  }, []);\n  const loc = useLocation();\n  // /login이 아닐때 페이지 이동마다 로그인 검증\n  useEffect(() => {\n    if (loc.pathname != \"/login\") {\n      verifyLogin();\n      console.log(\"navigating...\" + Math.random() + loc.pathname);\n    }\n  }, [loc]);\n\n  //로그인 검증 함수\n  const verifyLogin = () => {\n    const temptok = localStorage.getItem(\"logintoken\");\n    const tempreftok = localStorage.getItem(\"reftoken\");\n\n    // localstorage에 토큰 가져오기\n    if (tempreftok == null) {\n      //없으면 return\n      console.log(\"리프토큰이 업삼\");\n      localStorage.removeItem(\"logintoken\");\n      nav(\"/login\");\n      return;\n    } else {\n      //있으면\n      const exp = Math.floor(Date.now() / 1000); // 현재시간\n      console.log({\n        exp\n      });\n      const decodedref = jwtDecode(tempreftok);\n      if (exp > decodedref.exp) {\n        console.log(\"유효기간 끝남 레프\");\n        localStorage.removeItem(\"reftoken\");\n        localStorage.removeItem(\"logintoken\");\n        nav(\"/login\");\n        return;\n      }\n      let decoded;\n      const getAcc = () => {\n        console.log(\"유효기간 끝남\");\n        localStorage.removeItem(\"logintoken\");\n        if (tempreftok != null) {\n          const doLogin = () => {\n            //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n            axios(\"http://192.168.0.82:9999/api/RefreshAccess\", {\n              method: \"get\",\n              params: {\n                key: tempreftok,\n                id: decodedref.sub\n              },\n              withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n            }).then(res => {\n              console.log(res);\n              const token = res.headers['authorization'].split(' ')[1];\n              localStorage.setItem('logintoken', token);\n              console.log(\"엑세스 재발급 완료.\" + token);\n            }).catch(err => {\n              localStorage.removeItem('reftoken');\n              localStorage.removeItem('logintoken');\n              nav(\"/login\");\n              return;\n              console.log(err.response);\n            });\n          };\n          doLogin();\n        }\n      };\n      if (temptok != null) {\n        decoded = jwtDecode(temptok);\n        if (decoded.exp < exp) {\n          getAcc();\n          return;\n        }\n        const doVerify = () => {\n          //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n          axios(\"http://192.168.0.82:9999/api/VerifyAccess\", {\n            method: \"get\",\n            params: {\n              key: temptok\n            },\n            withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n          }).then(res => {\n            console.log(\"유효한 토큰입니다.\");\n          }).catch(err => {\n            console.log(\"가짜 토큰입니다.\");\n            localStorage.removeItem('logintoken');\n            getAcc();\n            return;\n          });\n        };\n        doVerify();\n      } else {\n        getAcc();\n        return;\n      }\n      console.log(decodedref);\n      console.log(decoded);\n      //axios(\"주소\", 토큰)     : 백엔드 유효 검증\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: isLoggedin,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n_s(Connector, \"12YzfrOtOjxkiiM09cHNJPz+lyQ=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Connector;\nfunction Connect() {\n  // websocket 연결\n}\n_c2 = Connect;\nexport function useWebSocket() {\n  _s2();\n  return useContext(WebSocketContext);\n}\n_s2(useWebSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c, _c2;\n$RefreshReg$(_c, \"Connector\");\n$RefreshReg$(_c2, \"Connect\");","map":{"version":3,"names":["Children","createContext","useActionState","useContext","useEffect","useState","useNavigate","useSearchParams","useLocation","jwtDecode","axios","jsxDEV","_jsxDEV","WebSocketContext","isLoggedin","Connector","children","_s","nav","accessToken","setAccessToken","console","log","Math","random","loc","pathname","verifyLogin","temptok","localStorage","getItem","tempreftok","removeItem","exp","floor","Date","now","decodedref","decoded","getAcc","doLogin","method","params","key","id","sub","withCredentials","then","res","token","headers","split","setItem","catch","err","response","doVerify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","Connect","_c2","useWebSocket","_s2","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/scoop/scoop_front/src/Connector.jsx"],"sourcesContent":["import { Children, createContext, useActionState, useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams,useLocation } from \"react-router-dom\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport axios from \"axios\";\r\n\r\nconst WebSocketContext = createContext(null);\r\nconst isLoggedin = false;\r\n\r\nexport function Connector({children}){\r\n    const nav = useNavigate();\r\n    const [accessToken, setAccessToken] = useState(false);    \r\n\r\n    useEffect(() => {\r\n\r\n        console.log(\"Connecting...\" + Math.random());\r\n\r\n    },[] )\r\n    const loc = useLocation();\r\n    // /login이 아닐때 페이지 이동마다 로그인 검증\r\n    useEffect(()=>{\r\n        if(loc.pathname !=\"/login\"){\r\n        verifyLogin();\r\n        console.log(\"navigating...\" + Math.random() + loc.pathname);\r\n        }\r\n    },[loc])\r\n\r\n    //로그인 검증 함수\r\n    const verifyLogin = () =>\r\n    {\r\n        const temptok = localStorage.getItem(\"logintoken\");  \r\n        const tempreftok  = localStorage.getItem(\"reftoken\");\r\n\r\n        // localstorage에 토큰 가져오기\r\n        if(tempreftok == null){ //없으면 return\r\n            console.log(\"리프토큰이 업삼\")\r\n            localStorage.removeItem(\"logintoken\");\r\n\r\n            nav(\"/login\");\r\n            return;\r\n        }\r\n        else{ //있으면\r\n            const exp = Math.floor(Date.now() / 1000); // 현재시간\r\n            console.log({ exp }); \r\n            const decodedref = jwtDecode(tempreftok);\r\n            if(exp > decodedref.exp){\r\n                console.log(\"유효기간 끝남 레프\");\r\n                localStorage.removeItem(\"reftoken\");\r\n                localStorage.removeItem(\"logintoken\");\r\n                nav(\"/login\");\r\n                return;\r\n            }\r\n            let decoded;\r\n\r\n            const getAcc = () => {\r\n                console.log(\"유효기간 끝남\");\r\n                localStorage.removeItem(\"logintoken\");\r\n                if(tempreftok != null){\r\n                    const doLogin = () => {\r\n                        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                            axios(\"http://192.168.0.82:9999/api/RefreshAccess\", {\r\n                                method : \"get\",\r\n                                params : {\r\n                                    key: tempreftok,\r\n                                    id : decodedref.sub\r\n                                },\r\n                                withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                    \r\n                            }).then((res) => {  \r\n                                    console.log(res);\r\n                                    const token = res.headers['authorization'].split(' ')[1];\r\n                                    localStorage.setItem('logintoken', token);\r\n                                    console.log(\"엑세스 재발급 완료.\" + token);\r\n                            }).catch((err) => { \r\n                                    localStorage.removeItem('reftoken');\r\n                                    localStorage.removeItem('logintoken');\r\n                                    nav(\"/login\");\r\n                                    return;\r\n                                \r\n                                console.log(err.response);\r\n                            });\r\n                        }\r\n                        doLogin();\r\n                }\r\n            }\r\n\r\n            if(temptok != null){\r\n                    decoded = jwtDecode(temptok );               \r\n                    if(decoded.exp < exp)\r\n                    {        \r\n                        getAcc();\r\n                        return;\r\n                    }\r\n                    const doVerify = () => {\r\n                        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                            axios(\"http://192.168.0.82:9999/api/VerifyAccess\", {\r\n                                method : \"get\",\r\n                                params : {\r\n                                    key: temptok,\r\n                                },\r\n                                withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                    \r\n                            }).then((res) => { \r\n                                    console.log(\"유효한 토큰입니다.\");\r\n                            }).catch((err) => { \r\n                                    console.log(\"가짜 토큰입니다.\");\r\n                                    localStorage.removeItem('logintoken');\r\n                                    getAcc();\r\n                                    return;\r\n                            });\r\n                        }\r\n                        doVerify();\r\n            }\r\n            else{\r\n                getAcc();\r\n                return;\r\n            }\r\n\r\n\r\n            \r\n            console.log(decodedref);\r\n            console.log(decoded);\r\n            //axios(\"주소\", 토큰)     : 백엔드 유효 검증\r\n            return; \r\n        }\r\n    };\r\n    return (\r\n        <WebSocketContext.Provider value={isLoggedin}>\r\n                {children}\r\n        </WebSocketContext.Provider>\r\n      )\r\n}\r\nfunction Connect(){\r\n // websocket 연결\r\n}\r\n\r\n\r\nexport function useWebSocket() {\r\n\r\n    return useContext(WebSocketContext);\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}