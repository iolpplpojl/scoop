{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\scoop\\\\scoop_front\\\\src\\\\Connector.jsx\",\n  _s = $RefreshSig$();\nimport { Children, createContext, useActionState, useContext, useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams, useLocation } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext(null);\nexport function Connector({\n  children\n}) {\n  _s();\n  const nav = useNavigate();\n  const [messageQueue, setMessageQueue] = useState(null);\n  const [accessToken, setAccessToken] = useState();\n  useEffect(() => {\n    verifyLogin().then(result => {\n      if (result == true) {\n        console.log(\"ConnectWS\");\n        ConnectWs();\n      }\n    });\n    console.log(\"Connecting...\" + Math.random());\n  }, []);\n  const loc = useLocation();\n  // /login이 아닐때 페이지 이동마다 로그인 검증\n  useEffect(() => {\n    if (loc.pathname != \"/login\") {\n      console.log(\"navigating...\" + Math.random() + loc.pathname);\n    }\n  }, [loc]);\n  let soc;\n  const ConnectWs = () => {\n    soc = new WebSocket(\"wss://192.168.0.82:9999/gateway\");\n    soc.onopen = () => {\n      console.log(accessToken);\n      soc.send(JSON.stringify({\n        \"writer\": \"admin\",\n        \"text\": \"Connected\",\n        \"channel\": \"test1\"\n      }));\n    };\n  };\n\n  //로그인 검증 함수\n  const verifyLogin = async () => {\n    const temptok = localStorage.getItem(\"logintoken\");\n    console.log(jwtDecode(temptok));\n    if (temptok != undefined) {\n      setAccessToken(jwtDecode(temptok));\n    }\n    const exp = Math.floor(Date.now() / 1000); // 현재시간\n    let decoded;\n    const getAcc = () => {\n      console.log(\"유효기간 끝남\");\n      localStorage.removeItem(\"logintoken\");\n      const doLogin = () => {\n        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n        axios(\"https://192.168.0.82:9999/api/RefreshAccess\", {\n          method: \"get\",\n          params: {},\n          withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n        }).then(res => {\n          console.log(res);\n          const token = res.headers['authorization'].split(' ')[1];\n          localStorage.setItem('logintoken', token);\n          setAccessToken(jwtDecode(token));\n          console.log(\"엑세스 재발급 완료.\" + token);\n        }).catch(err => {\n          localStorage.removeItem('logintoken');\n          nav(\"/login\");\n          return;\n          console.log(err.response);\n        });\n      };\n      doLogin();\n    };\n    if (temptok != null) {\n      decoded = jwtDecode(temptok);\n      if (decoded.exp < exp) {\n        getAcc();\n        return;\n      }\n      const doVerify = () => {\n        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n        axios(\"https://192.168.0.82:9999/api/VerifyAccess\", {\n          method: \"get\",\n          params: {\n            key: temptok\n          },\n          withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n        }).then(res => {\n          console.log(\"유효한 토큰입니다.\");\n        }).catch(err => {\n          console.log(\"가짜 토큰입니다.\");\n          localStorage.removeItem('logintoken');\n          getAcc();\n          return;\n        });\n      };\n      doVerify();\n    } else {\n      getAcc();\n      return;\n    }\n    //axios(\"주소\", 토큰)     : 백엔드 유효 검증\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: \"test\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n_s(Connector, \"PkS9a5KwnGy+7qRGVbDEiktD8Y4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Connector;\nfunction getCookie(name) {\n  var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n  console.log(value + \"qoffb\");\n  return value ? value[2] : null;\n}\n;\nvar _c;\n$RefreshReg$(_c, \"Connector\");","map":{"version":3,"names":["Children","createContext","useActionState","useContext","useEffect","useState","useNavigate","useSearchParams","useLocation","jwtDecode","axios","jsxDEV","_jsxDEV","Context","Connector","children","_s","nav","messageQueue","setMessageQueue","accessToken","setAccessToken","verifyLogin","then","result","console","log","ConnectWs","Math","random","loc","pathname","soc","WebSocket","onopen","send","JSON","stringify","temptok","localStorage","getItem","undefined","exp","floor","Date","now","decoded","getAcc","removeItem","doLogin","method","params","withCredentials","res","token","headers","split","setItem","catch","err","response","doVerify","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","getCookie","name","document","cookie","match","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/scoop/scoop_front/src/Connector.jsx"],"sourcesContent":["import { Children, createContext, useActionState, useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams,useLocation } from \"react-router-dom\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport axios from \"axios\";\r\n\r\nexport const Context = createContext(null);\r\nexport function Connector({children}){\r\n    const nav = useNavigate();\r\n    const [messageQueue, setMessageQueue] = useState(null);\r\n    const [accessToken, setAccessToken] = useState();    \r\n            useEffect(() => {\r\n                verifyLogin().then\r\n                ((result) =>\r\n                {\r\n                    if(result == true){                    \r\n                        console.log(\"ConnectWS\");\r\n                        ConnectWs();    \r\n                    }\r\n                });\r\n        console.log(\"Connecting...\" + Math.random());\r\n\r\n    },[] )\r\n    const loc = useLocation();\r\n    // /login이 아닐때 페이지 이동마다 로그인 검증\r\n    useEffect(()=>{\r\n        if(loc.pathname !=\"/login\"){\r\n\r\n        console.log(\"navigating...\" + Math.random() + loc.pathname);\r\n        }\r\n    },[loc])\r\n\r\n\r\n    let soc;\r\n\r\n    const ConnectWs = () => {\r\n        soc = new WebSocket(\"wss://192.168.0.82:9999/gateway\");\r\n        soc.onopen = () => {\r\n            console.log(accessToken );\r\n            soc.send(JSON.stringify({\r\n                \"writer\" : \"admin\",\r\n                \"text\" : \"Connected\",\r\n                \"channel\" : \"test1\"\r\n            }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //로그인 검증 함수\r\n    const verifyLogin = async () =>\r\n    {\r\n           const temptok = localStorage.getItem(\"logintoken\");  \r\n           console.log(jwtDecode(temptok));\r\n           if(temptok != undefined){\r\n                setAccessToken(jwtDecode(temptok));\r\n           }\r\n            const exp = Math.floor(Date.now() / 1000); // 현재시간\r\n            let decoded;\r\n\r\n            const getAcc = () => {\r\n                console.log(\"유효기간 끝남\");\r\n                localStorage.removeItem(\"logintoken\");\r\n                    const doLogin = () => {\r\n                        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                            axios(\"https://192.168.0.82:9999/api/RefreshAccess\", {\r\n                                method : \"get\",\r\n                                params : {},\r\n                                withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                    \r\n                            }).then((res) => {  \r\n                                    console.log(res);\r\n                                    const token = res.headers['authorization'].split(' ')[1];\r\n                                    localStorage.setItem('logintoken', token);\r\n                                    setAccessToken(jwtDecode(token));\r\n\r\n                                    console.log(\"엑세스 재발급 완료.\" + token);\r\n                            }).catch((err) => { \r\n                                    localStorage.removeItem('logintoken');\r\n                                    nav(\"/login\");\r\n                                    return;\r\n                                \r\n                                console.log(err.response);\r\n                            });\r\n                        }\r\n                        doLogin();\r\n                }\r\n            \r\n\r\n            if(temptok != null){\r\n                    decoded = jwtDecode(temptok );               \r\n                    if(decoded.exp < exp)\r\n                    {        \r\n                        getAcc();\r\n                        return;\r\n                    }\r\n                    const doVerify = () => {\r\n                        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                            axios(\"https://192.168.0.82:9999/api/VerifyAccess\", {\r\n                                method : \"get\",\r\n                                params : {\r\n                                    key: temptok,\r\n                                },\r\n                                withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                    \r\n                            }).then((res) => { \r\n                                    console.log(\"유효한 토큰입니다.\");\r\n                            }).catch((err) => { \r\n                                    console.log(\"가짜 토큰입니다.\");\r\n                                    localStorage.removeItem('logintoken');\r\n                                    getAcc();\r\n                                    return;\r\n                            });\r\n                        }\r\n                        doVerify();\r\n            }\r\n            else{\r\n                getAcc();\r\n                return;\r\n            }\r\n            //axios(\"주소\", 토큰)     : 백엔드 유효 검증\r\n            return true; \r\n        }\r\n    return (\r\n        <Context.Provider value={\"test\"}>\r\n                {children}\r\n        </Context.Provider>\r\n      )\r\n}\r\n\r\n\r\nfunction getCookie(name) {\r\n    var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\r\n    console.log(value+\"qoffb\");\r\n    return value ? value[2] : null;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}