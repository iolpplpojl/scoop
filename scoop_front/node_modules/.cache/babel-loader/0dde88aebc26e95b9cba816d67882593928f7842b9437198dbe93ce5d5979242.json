{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\scoop\\\\scoop_front\\\\src\\\\component\\\\AddFriend.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getSubFromLoginToken() {\n  const token = localStorage.getItem(\"logintoken\");\n  if (!token) {\n    console.warn(\"로그인 토큰이 존재하지 않습니다.\");\n    return \"\";\n  }\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      throw new Error(\"유효하지 않은 토큰 형식입니다.\");\n    }\n    const payload = parts[1];\n    const decodedPayload = JSON.parse(atob(payload));\n    return decodedPayload.sub || \"\";\n  } catch (error) {\n    console.error(\"토큰 파싱 중 오류 발생:\", error);\n    return \"\";\n  }\n}\nconst AddFriend = ({\n  onClose,\n  initialFriendCode\n}) => {\n  _s();\n  const [friendCode, setFriendCode] = useState(initialFriendCode || \"\");\n  const [error, setError] = useState(\"\");\n  const REST = process.env.REACT_APP_RESTURL;\n  const handleChange = e => {\n    const value = e.target.value;\n    if (/^\\d*$/.test(value)) {\n      setFriendCode(value);\n      setError(\"\");\n    } else {\n      setError(\"숫자만 입력 가능합니다.\");\n    }\n  };\n  const handleSubmit = friendCodeToSend => {\n    const sub = getSubFromLoginToken();\n    if (!sub) {\n      setError(\"로그인 정보가 없습니다.\");\n      return;\n    }\n    const url = `https://${REST}/api/addfriend`;\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        sub,\n        friendCode: friendCodeToSend || friendCode\n      })\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`서버 응답 에러: ${res.status}`);\n      }\n      return res.json();\n    }).then(data => {\n      alert(data.message || \"친구 추가 성공!\");\n      onClose();\n    }).catch(err => {\n      console.error(\"❌ 요청 오류:\", err);\n      setError(err.message || \"오류가 발생했습니다.\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uCE5C\\uAD6C\\uC758 \\uAC1C\\uC778 \\uC2DD\\uBCC4\\uCF54\\uB4DC\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: friendCode,\n      onChange: handleChange,\n      placeholder: \"\\uC22B\\uC790\\uB9CC \\uC785\\uB825 \\uAC00\\uB2A5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSubmit(),\n        children: \"\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n// ✅ 외부에서 `userId`를 직접 전달받아 친구 추가할 수 있도록 `addFriend` 함수 추가\n_s(AddFriend, \"fAKnIE3odDFe6033b+CNkPHxxWQ=\");\n_c = AddFriend;\nexport const addFriend = userId => {\n  const sub = getSubFromLoginToken();\n  if (!sub) {\n    alert(\"로그인 정보가 없습니다.\");\n    return;\n  }\n  const REST = process.env.REACT_APP_RESTURL;\n  const url = `https://${REST}/api/addfriend`;\n  fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      sub,\n      friendCode: userId\n    })\n  }).then(res => {\n    if (!res.ok) {\n      throw new Error(`서버 응답 에러: ${res.status}`);\n    }\n    return res.json();\n  }).then(data => {\n    alert(data.message || \"친구 추가 성공!\");\n  }).catch(err => {\n    console.error(\"❌ 요청 오류:\", err);\n    alert(err.message || \"오류가 발생했습니다.\");\n  });\n};\nexport default AddFriend;\nvar _c;\n$RefreshReg$(_c, \"AddFriend\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","getSubFromLoginToken","token","localStorage","getItem","console","warn","parts","split","length","Error","payload","decodedPayload","JSON","parse","atob","sub","error","AddFriend","onClose","initialFriendCode","_s","friendCode","setFriendCode","setError","REST","process","env","REACT_APP_RESTURL","handleChange","e","value","target","test","handleSubmit","friendCodeToSend","url","fetch","method","headers","body","stringify","then","res","ok","status","json","data","alert","message","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","addFriend","userId","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/scoop/scoop_front/src/component/AddFriend.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction getSubFromLoginToken() {\r\n  const token = localStorage.getItem(\"logintoken\");\r\n  if (!token) {\r\n    console.warn(\"로그인 토큰이 존재하지 않습니다.\");\r\n    return \"\";\r\n  }\r\n  \r\n  try {\r\n    const parts = token.split('.');\r\n    if (parts.length !== 3) {\r\n      throw new Error(\"유효하지 않은 토큰 형식입니다.\");\r\n    }\r\n    const payload = parts[1];\r\n    const decodedPayload = JSON.parse(atob(payload));\r\n    return decodedPayload.sub || \"\";\r\n  } catch (error) {\r\n    console.error(\"토큰 파싱 중 오류 발생:\", error);\r\n    return \"\";\r\n  }\r\n}\r\n\r\nconst AddFriend = ({ onClose, initialFriendCode }) => {\r\n  const [friendCode, setFriendCode] = useState(initialFriendCode || \"\");\r\n  const [error, setError] = useState(\"\");\r\n  const REST = process.env.REACT_APP_RESTURL;\r\n\r\n  const handleChange = (e) => {\r\n    const value = e.target.value;\r\n    if (/^\\d*$/.test(value)) {\r\n      setFriendCode(value);\r\n      setError(\"\");\r\n    } else {\r\n      setError(\"숫자만 입력 가능합니다.\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (friendCodeToSend) => {\r\n    const sub = getSubFromLoginToken();\r\n    if (!sub) {\r\n      setError(\"로그인 정보가 없습니다.\");\r\n      return;\r\n    }\r\n\r\n    const url = `https://${REST}/api/addfriend`;\r\n\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ sub, friendCode: friendCodeToSend || friendCode }),\r\n    })\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(`서버 응답 에러: ${res.status}`);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        alert(data.message || \"친구 추가 성공!\");\r\n        onClose();\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"❌ 요청 오류:\", err);\r\n        setError(err.message || \"오류가 발생했습니다.\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>친구의 개인 식별코드를 입력하세요.</h2>\r\n      <input\r\n        type=\"text\"\r\n        value={friendCode}\r\n        onChange={handleChange}\r\n        placeholder=\"숫자만 입력 가능\"\r\n      />\r\n      {error && <p>{error}</p>}\r\n      <div>\r\n        <button onClick={onClose}>취소</button>\r\n        <button onClick={() => handleSubmit()}>확인</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// ✅ 외부에서 `userId`를 직접 전달받아 친구 추가할 수 있도록 `addFriend` 함수 추가\r\nexport const addFriend = (userId) => {\r\n  const sub = getSubFromLoginToken();\r\n  if (!sub) {\r\n    alert(\"로그인 정보가 없습니다.\");\r\n    return;\r\n  }\r\n\r\n  const REST = process.env.REACT_APP_RESTURL;\r\n  const url = `https://${REST}/api/addfriend`;\r\n\r\n  fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ sub, friendCode: userId }),\r\n  })\r\n    .then((res) => {\r\n      if (!res.ok) {\r\n        throw new Error(`서버 응답 에러: ${res.status}`);\r\n      }\r\n      return res.json();\r\n    })\r\n    .then((data) => {\r\n      alert(data.message || \"친구 추가 성공!\");\r\n    })\r\n    .catch((err) => {\r\n      console.error(\"❌ 요청 오류:\", err);\r\n      alert(err.message || \"오류가 발생했습니다.\");\r\n    });\r\n};\r\n\r\nexport default AddFriend;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}