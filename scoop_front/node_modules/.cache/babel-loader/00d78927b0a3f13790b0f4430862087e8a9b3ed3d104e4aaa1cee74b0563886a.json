{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\scoop\\\\scoop_front\\\\src\\\\Connector.jsx\",\n  _s = $RefreshSig$();\nimport { Children, createContext, useActionState, useContext, useEffect, useReducer, useState } from \"react\";\nimport { useNavigate, useSearchParams, useLocation } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext(null);\nexport function Connector({\n  children\n}) {\n  _s();\n  const nav = useNavigate();\n  const [messageQueue, setMessageQueue] = useState(null);\n  const [accessToken, setAccessToken] = useState();\n  const [wsConnected, setWsConnected] = useState(false);\n  const socRef = useRef();\n  useEffect(() => {\n    verifyLogin();\n  }, []);\n  const loc = useLocation();\n  // /login이 아닐때 페이지 이동마다 로그인 검증\n  useEffect(() => {\n    if (loc.pathname != \"/login\") {\n      console.log(\"navigating...\" + Math.random() + loc.pathname);\n    }\n  }, [loc]);\n  useEffect(() => {\n    if (wsConnected !== true) {\n      ConnectWs();\n    }\n  }, [accessToken]);\n  let soc;\n  const ConnectWs = () => {\n    console.log(accessToken + \"토큰\");\n    if (wsConnected !== true && accessToken !== undefined) {\n      soc = new WebSocket(\"wss://192.168.0.82:9999/gateway\");\n      soc.onopen = () => {\n        console.log(accessToken);\n        setWsConnected(true);\n        soc.send(JSON.stringify({\n          \"type\": \"ENTER_APP\",\n          \"writer\": \"admin\",\n          // accessToken의 변수가 들어갈 자리\n          \"text\": \"Connected\"\n        }));\n      };\n      soc.onmessage = () => {\n        soc.send(JSON.stringify({\n          \"type\": \"NOPE  \",\n          \"writer\": \"admin\"\n        }));\n      };\n    }\n  };\n\n  //로그인 검증 함수\n  const verifyLogin = () => {\n    const temptok = localStorage.getItem(\"logintoken\");\n    if (temptok != undefined) {\n      setAccessToken(jwtDecode(temptok));\n    }\n    const exp = Math.floor(Date.now() / 1000); // 현재시간\n    let decoded;\n    const getAcc = () => {\n      console.log(\"유효기간 끝남\");\n      localStorage.removeItem(\"logintoken\");\n      const doLogin = () => {\n        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n        axios(\"https://192.168.0.82:9999/api/RefreshAccess\", {\n          method: \"get\",\n          params: {},\n          withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n        }).then(res => {\n          console.log(res);\n          const token = res.headers['authorization'].split(' ')[1];\n          localStorage.setItem('logintoken', token);\n          setAccessToken(jwtDecode(token));\n          console.log(\"엑세스 재발급 완료.\" + token);\n        }).catch(err => {\n          localStorage.removeItem('logintoken');\n          nav(\"/login\");\n          return;\n          console.log(err.response);\n        });\n      };\n      doLogin();\n    };\n    if (temptok != null) {\n      decoded = jwtDecode(temptok);\n      if (decoded.exp < exp) {\n        getAcc();\n        return;\n      }\n      const doVerify = () => {\n        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n        axios(\"https://192.168.0.82:9999/api/VerifyAccess\", {\n          method: \"get\",\n          params: {\n            key: temptok\n          },\n          withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n        }).then(res => {\n          console.log(\"유효한 토큰입니다.\");\n        }).catch(err => {\n          console.log(\"가짜 토큰입니다.\");\n          localStorage.removeItem('logintoken');\n          getAcc();\n          return;\n        });\n      };\n      doVerify();\n    } else {\n      getAcc();\n      return;\n    }\n    //axios(\"주소\", 토큰)     : 백엔드 유효 검증\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: \"test\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 13\n  }, this);\n}\n_s(Connector, \"b/fuq0t/YiDcVQlRA56T2Xk75CE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Connector;\nfunction getCookie(name) {\n  var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n  console.log(value + \"qoffb\");\n  return value ? value[2] : null;\n}\n;\nvar _c;\n$RefreshReg$(_c, \"Connector\");","map":{"version":3,"names":["Children","createContext","useActionState","useContext","useEffect","useReducer","useState","useNavigate","useSearchParams","useLocation","jwtDecode","axios","jsxDEV","_jsxDEV","Context","Connector","children","_s","nav","messageQueue","setMessageQueue","accessToken","setAccessToken","wsConnected","setWsConnected","socRef","useRef","verifyLogin","loc","pathname","console","log","Math","random","ConnectWs","soc","undefined","WebSocket","onopen","send","JSON","stringify","onmessage","temptok","localStorage","getItem","exp","floor","Date","now","decoded","getAcc","removeItem","doLogin","method","params","withCredentials","then","res","token","headers","split","setItem","catch","err","response","doVerify","key","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","getCookie","name","document","cookie","match","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/scoop/scoop_front/src/Connector.jsx"],"sourcesContent":["    import { Children, createContext, useActionState, useContext, useEffect, useReducer, useState } from \"react\";\r\n    import { useNavigate, useSearchParams,useLocation } from \"react-router-dom\";\r\n    import {jwtDecode} from \"jwt-decode\";\r\n    import axios from \"axios\";\r\n\r\n    export const Context = createContext(null);\r\n    export function Connector({children}){\r\n        const nav = useNavigate();\r\n        const [messageQueue, setMessageQueue] = useState(null);\r\n        const [accessToken, setAccessToken] = useState();    \r\n        const [wsConnected, setWsConnected] = useState(false);\r\n        const socRef = useRef();\r\n        \r\n        useEffect(() => {\r\n                    verifyLogin();\r\n        },[] )\r\n        const loc = useLocation();\r\n        // /login이 아닐때 페이지 이동마다 로그인 검증\r\n        useEffect(()=>{\r\n            if(loc.pathname !=\"/login\"){\r\n\r\n            console.log(\"navigating...\" + Math.random() + loc.pathname);\r\n            }\r\n        },[loc])\r\n\r\n        useEffect(() => { \r\n            if(wsConnected !== true){\r\n                ConnectWs();\r\n            }\r\n        }, [accessToken])\r\n\r\n        let soc;\r\n\r\n        const ConnectWs = () => {\r\n            console.log(accessToken + \"토큰\");\r\n            if(wsConnected !== true && accessToken !== undefined){\r\n                soc = new WebSocket(\"wss://192.168.0.82:9999/gateway\");\r\n            \r\n            soc.onopen = () => {\r\n                console.log(accessToken);\r\n                setWsConnected(true);\r\n                soc.send(JSON.stringify({\r\n                    \"type\" : \"ENTER_APP\",\r\n                    \"writer\" : \"admin\", // accessToken의 변수가 들어갈 자리\r\n                    \"text\" : \"Connected\",\r\n                }));\r\n            }\r\n\r\n            soc.onmessage = () => {\r\n                soc.send(JSON.stringify({\r\n                    \"type\" : \"NOPE  \",\r\n                    \"writer\" : \"admin\",\r\n                }))\r\n            }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        //로그인 검증 함수\r\n        const verifyLogin = () =>\r\n        {\r\n            const temptok = localStorage.getItem(\"logintoken\");  \r\n            if(temptok != undefined){\r\n                    setAccessToken(jwtDecode(temptok));\r\n            }\r\n                const exp = Math.floor(Date.now() / 1000); // 현재시간\r\n                let decoded;\r\n\r\n                const getAcc = () => {\r\n                    console.log(\"유효기간 끝남\");\r\n                    localStorage.removeItem(\"logintoken\");\r\n                        const doLogin = () => {\r\n                            //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                                axios(\"https://192.168.0.82:9999/api/RefreshAccess\", {\r\n                                    method : \"get\",\r\n                                    params : {},\r\n                                    withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                        \r\n                                }).then((res) => {  \r\n                                        console.log(res);\r\n                                        const token = res.headers['authorization'].split(' ')[1];\r\n                                        localStorage.setItem('logintoken', token);\r\n                                        setAccessToken(jwtDecode(token));\r\n                                        console.log(\"엑세스 재발급 완료.\" + token);\r\n                                }).catch((err) => { \r\n                                        localStorage.removeItem('logintoken');\r\n                                        nav(\"/login\");\r\n                                        return;\r\n                                    \r\n                                    console.log(err.response);\r\n                                });\r\n                            }\r\n                            doLogin();\r\n                    }\r\n                \r\n\r\n                if(temptok != null){\r\n                        decoded = jwtDecode(temptok );               \r\n                        if(decoded.exp < exp)\r\n                        {        \r\n                            getAcc();\r\n                            return;\r\n                        }\r\n                        const doVerify = () => {\r\n                            //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                                axios(\"https://192.168.0.82:9999/api/VerifyAccess\", {\r\n                                    method : \"get\",\r\n                                    params : {\r\n                                        key: temptok,\r\n                                    },\r\n                                    withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                        \r\n                                }).then((res) => { \r\n                                        console.log(\"유효한 토큰입니다.\");\r\n                                }).catch((err) => { \r\n                                        console.log(\"가짜 토큰입니다.\");\r\n                                        localStorage.removeItem('logintoken');\r\n                                        getAcc();\r\n                                        return;\r\n                                });\r\n                            }\r\n                            doVerify();\r\n                }\r\n                else{\r\n                    getAcc();\r\n                    return;\r\n                }\r\n                //axios(\"주소\", 토큰)     : 백엔드 유효 검증\r\n                return true; \r\n            }\r\n        return (\r\n            <Context.Provider value={\"test\"}>\r\n                    {children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n\r\n\r\n    function getCookie(name) {\r\n        var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\r\n        console.log(value+\"qoffb\");\r\n        return value ? value[2] : null;\r\n    };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}