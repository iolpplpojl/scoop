{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\scoop\\\\scoop_front\\\\src\\\\Connector.jsx\",\n  _s = $RefreshSig$();\nimport { Children, createContext, useActionState, useContext, useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams, useLocation } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext(null);\nexport function Connector({\n  children\n}) {\n  _s();\n  const nav = useNavigate();\n  const [accessToken, setAccessToken] = useState(null);\n  useEffect(() => {\n    console.log(\"Connecting...\" + Math.random());\n  }, []);\n  const loc = useLocation();\n  // /login이 아닐때 페이지 이동마다 로그인 검증\n  useEffect(() => {\n    if (loc.pathname != \"/login\") {\n      verifyLogin();\n      console.log(\"navigating...\" + Math.random() + loc.pathname);\n    }\n  }, [loc]);\n\n  //로그인 검증 함수\n  const verifyLogin = () => {\n    const temptok = localStorage.getItem(\"logintoken\");\n    const tempreftok = getCookie(\"ref\");\n\n    // localstorage에 토큰 가져오기\n    if (tempreftok == null) {\n      //없으면 return\n      console.log(\"리프토큰이 업삼\");\n      localStorage.removeItem(\"logintoken\");\n      nav(\"/login\");\n      return;\n    } else {\n      //있으면\n      const exp = Math.floor(Date.now() / 1000); // 현재시간\n      console.log({\n        exp\n      });\n      const decodedref = jwtDecode(tempreftok);\n      if (exp > decodedref.exp) {\n        console.log(\"유효기간 끝남 레프\");\n        localStorage.removeItem(\"reftoken\");\n        localStorage.removeItem(\"logintoken\");\n        nav(\"/login\");\n        return;\n      }\n      let decoded;\n      const getAcc = () => {\n        console.log(\"유효기간 끝남\");\n        localStorage.removeItem(\"logintoken\");\n        if (tempreftok != null) {\n          const doLogin = () => {\n            //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n            axios(\"http://192.168.0.82:9999/api/RefreshAccess\", {\n              method: \"get\",\n              params: {\n                key: tempreftok,\n                id: decodedref.sub\n              },\n              withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n            }).then(res => {\n              console.log(res);\n              const token = res.headers['authorization'].split(' ')[1];\n              localStorage.setItem('logintoken', token);\n              console.log(\"엑세스 재발급 완료.\" + token);\n            }).catch(err => {\n              localStorage.removeItem('reftoken');\n              localStorage.removeItem('logintoken');\n              nav(\"/login\");\n              return;\n              console.log(err.response);\n            });\n          };\n          doLogin();\n        }\n      };\n      if (temptok != null) {\n        decoded = jwtDecode(temptok);\n        if (decoded.exp < exp) {\n          getAcc();\n          return;\n        }\n        const doVerify = () => {\n          //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n          axios(\"http://192.168.0.82:9999/api/VerifyAccess\", {\n            method: \"get\",\n            params: {\n              key: temptok\n            },\n            withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n          }).then(res => {\n            console.log(\"유효한 토큰입니다.\");\n          }).catch(err => {\n            console.log(\"가짜 토큰입니다.\");\n            localStorage.removeItem('logintoken');\n            getAcc();\n            return;\n          });\n        };\n        doVerify();\n      } else {\n        getAcc();\n        return;\n      }\n      console.log(decodedref);\n      console.log(decoded);\n      //axios(\"주소\", 토큰)     : 백엔드 유효 검증\n      return;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: \"test\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n_s(Connector, \"gRiJwrKRKNuP95PLsGOXogwyXN0=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Connector;\nfunction getCookie(name) {\n  var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n  return value ? value[2] : null;\n}\n;\nvar _c;\n$RefreshReg$(_c, \"Connector\");","map":{"version":3,"names":["Children","createContext","useActionState","useContext","useEffect","useState","useNavigate","useSearchParams","useLocation","jwtDecode","axios","jsxDEV","_jsxDEV","Context","Connector","children","_s","nav","accessToken","setAccessToken","console","log","Math","random","loc","pathname","verifyLogin","temptok","localStorage","getItem","tempreftok","getCookie","removeItem","exp","floor","Date","now","decodedref","decoded","getAcc","doLogin","method","params","key","id","sub","withCredentials","then","res","token","headers","split","setItem","catch","err","response","doVerify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","name","document","cookie","match","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/scoop/scoop_front/src/Connector.jsx"],"sourcesContent":["import { Children, createContext, useActionState, useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate, useSearchParams,useLocation } from \"react-router-dom\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport axios from \"axios\";\r\n\r\nexport const Context = createContext(null);\r\n\r\nexport function Connector({children}){\r\n    const nav = useNavigate();\r\n    const [accessToken, setAccessToken] = useState(null);    \r\n\r\n    useEffect(() => {\r\n\r\n        console.log(\"Connecting...\" + Math.random());\r\n\r\n    },[] )\r\n    const loc = useLocation();\r\n    // /login이 아닐때 페이지 이동마다 로그인 검증\r\n    useEffect(()=>{\r\n        if(loc.pathname !=\"/login\"){\r\n        verifyLogin();\r\n        console.log(\"navigating...\" + Math.random() + loc.pathname);\r\n        }\r\n    },[loc])\r\n\r\n    //로그인 검증 함수\r\n    const verifyLogin = () =>\r\n    {\r\n        const temptok = localStorage.getItem(\"logintoken\");  \r\n        const tempreftok  = getCookie(\"ref\");\r\n\r\n        // localstorage에 토큰 가져오기\r\n        if(tempreftok == null){ //없으면 return\r\n            console.log(\"리프토큰이 업삼\")\r\n            localStorage.removeItem(\"logintoken\");\r\n\r\n            nav(\"/login\");\r\n            return;\r\n        }\r\n        else{ //있으면\r\n            const exp = Math.floor(Date.now() / 1000); // 현재시간\r\n            console.log({ exp }); \r\n            const decodedref = jwtDecode(tempreftok);\r\n            if(exp > decodedref.exp){\r\n                console.log(\"유효기간 끝남 레프\");\r\n                localStorage.removeItem(\"reftoken\");\r\n                localStorage.removeItem(\"logintoken\");\r\n                nav(\"/login\");\r\n                return;\r\n            }\r\n            let decoded;\r\n\r\n            const getAcc = () => {\r\n                console.log(\"유효기간 끝남\");\r\n                localStorage.removeItem(\"logintoken\");\r\n                if(tempreftok != null){\r\n                    const doLogin = () => {\r\n                        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                            axios(\"http://192.168.0.82:9999/api/RefreshAccess\", {\r\n                                method : \"get\",\r\n                                params : {\r\n                                    key: tempreftok,\r\n                                    id : decodedref.sub\r\n                                },\r\n                                withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                    \r\n                            }).then((res) => {  \r\n                                    console.log(res);\r\n                                    const token = res.headers['authorization'].split(' ')[1];\r\n                                    localStorage.setItem('logintoken', token);\r\n                                    console.log(\"엑세스 재발급 완료.\" + token);\r\n                            }).catch((err) => { \r\n                                    localStorage.removeItem('reftoken');\r\n                                    localStorage.removeItem('logintoken');\r\n                                    nav(\"/login\");\r\n                                    return;\r\n                                \r\n                                console.log(err.response);\r\n                            });\r\n                        }\r\n                        doLogin();\r\n                }\r\n            }\r\n\r\n            if(temptok != null){\r\n                    decoded = jwtDecode(temptok );               \r\n                    if(decoded.exp < exp)\r\n                    {        \r\n                        getAcc();\r\n                        return;\r\n                    }\r\n                    const doVerify = () => {\r\n                        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                            axios(\"http://192.168.0.82:9999/api/VerifyAccess\", {\r\n                                method : \"get\",\r\n                                params : {\r\n                                    key: temptok,\r\n                                },\r\n                                withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                    \r\n                            }).then((res) => { \r\n                                    console.log(\"유효한 토큰입니다.\");\r\n                            }).catch((err) => { \r\n                                    console.log(\"가짜 토큰입니다.\");\r\n                                    localStorage.removeItem('logintoken');\r\n                                    getAcc();\r\n                                    return;\r\n                            });\r\n                        }\r\n                        doVerify();\r\n            }\r\n            else{\r\n                getAcc();\r\n                return;\r\n            }\r\n\r\n\r\n            \r\n            console.log(decodedref);\r\n            console.log(decoded);\r\n            //axios(\"주소\", 토큰)     : 백엔드 유효 검증\r\n            return; \r\n        }\r\n    };\r\n    return (\r\n        <Context.Provider value={\"test\"}>\r\n                {children}\r\n        </Context.Provider>\r\n      )\r\n}\r\n\r\nfunction getCookie (name) {\r\n    var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\r\n    return value ? value[2] : null;\r\n};"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,aAAa,EAAEC,cAAc,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAChG,SAASC,WAAW,EAAEC,eAAe,EAACC,WAAW,QAAQ,kBAAkB;AAC3E,SAAQC,SAAS,QAAO,YAAY;AACpC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,OAAO,gBAAGZ,aAAa,CAAC,IAAI,CAAC;AAE1C,OAAO,SAASa,SAASA,CAAC;EAACC;AAAQ,CAAC,EAAC;EAAAC,EAAA;EACjC,MAAMC,GAAG,GAAGX,WAAW,CAAC,CAAC;EACzB,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IAEZgB,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAEhD,CAAC,EAAC,EAAG,CAAC;EACN,MAAMC,GAAG,GAAGhB,WAAW,CAAC,CAAC;EACzB;EACAJ,SAAS,CAAC,MAAI;IACV,IAAGoB,GAAG,CAACC,QAAQ,IAAG,QAAQ,EAAC;MAC3BC,WAAW,CAAC,CAAC;MACbN,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGC,GAAG,CAACC,QAAQ,CAAC;IAC3D;EACJ,CAAC,EAAC,CAACD,GAAG,CAAC,CAAC;;EAER;EACA,MAAME,WAAW,GAAGA,CAAA,KACpB;IACI,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAClD,MAAMC,UAAU,GAAIC,SAAS,CAAC,KAAK,CAAC;;IAEpC;IACA,IAAGD,UAAU,IAAI,IAAI,EAAC;MAAE;MACpBV,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvBO,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;MAErCf,GAAG,CAAC,QAAQ,CAAC;MACb;IACJ,CAAC,MACG;MAAE;MACF,MAAMgB,GAAG,GAAGX,IAAI,CAACY,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;MAC3ChB,OAAO,CAACC,GAAG,CAAC;QAAEY;MAAI,CAAC,CAAC;MACpB,MAAMI,UAAU,GAAG5B,SAAS,CAACqB,UAAU,CAAC;MACxC,IAAGG,GAAG,GAAGI,UAAU,CAACJ,GAAG,EAAC;QACpBb,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QACzBO,YAAY,CAACI,UAAU,CAAC,UAAU,CAAC;QACnCJ,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;QACrCf,GAAG,CAAC,QAAQ,CAAC;QACb;MACJ;MACA,IAAIqB,OAAO;MAEX,MAAMC,MAAM,GAAGA,CAAA,KAAM;QACjBnB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBO,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;QACrC,IAAGF,UAAU,IAAI,IAAI,EAAC;UAClB,MAAMU,OAAO,GAAGA,CAAA,KAAM;YAClB;YACI9B,KAAK,CAAC,4CAA4C,EAAE;cAChD+B,MAAM,EAAG,KAAK;cACdC,MAAM,EAAG;gBACLC,GAAG,EAAEb,UAAU;gBACfc,EAAE,EAAGP,UAAU,CAACQ;cACpB,CAAC;cACDC,eAAe,EAAE,IAAI,CAAE;YAE3B,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;cACT5B,OAAO,CAACC,GAAG,CAAC2B,GAAG,CAAC;cAChB,MAAMC,KAAK,GAAGD,GAAG,CAACE,OAAO,CAAC,eAAe,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;cACxDvB,YAAY,CAACwB,OAAO,CAAC,YAAY,EAAEH,KAAK,CAAC;cACzC7B,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG4B,KAAK,CAAC;YAC1C,CAAC,CAAC,CAACI,KAAK,CAAEC,GAAG,IAAK;cACV1B,YAAY,CAACI,UAAU,CAAC,UAAU,CAAC;cACnCJ,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;cACrCf,GAAG,CAAC,QAAQ,CAAC;cACb;cAEJG,OAAO,CAACC,GAAG,CAACiC,GAAG,CAACC,QAAQ,CAAC;YAC7B,CAAC,CAAC;UACN,CAAC;UACDf,OAAO,CAAC,CAAC;QACjB;MACJ,CAAC;MAED,IAAGb,OAAO,IAAI,IAAI,EAAC;QACXW,OAAO,GAAG7B,SAAS,CAACkB,OAAQ,CAAC;QAC7B,IAAGW,OAAO,CAACL,GAAG,GAAGA,GAAG,EACpB;UACIM,MAAM,CAAC,CAAC;UACR;QACJ;QACA,MAAMiB,QAAQ,GAAGA,CAAA,KAAM;UACnB;UACI9C,KAAK,CAAC,2CAA2C,EAAE;YAC/C+B,MAAM,EAAG,KAAK;YACdC,MAAM,EAAG;cACLC,GAAG,EAAEhB;YACT,CAAC;YACDmB,eAAe,EAAE,IAAI,CAAE;UAE3B,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;YACT5B,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;UACjC,CAAC,CAAC,CAACgC,KAAK,CAAEC,GAAG,IAAK;YACVlC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;YACxBO,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;YACrCO,MAAM,CAAC,CAAC;YACR;UACR,CAAC,CAAC;QACN,CAAC;QACDiB,QAAQ,CAAC,CAAC;MACtB,CAAC,MACG;QACAjB,MAAM,CAAC,CAAC;QACR;MACJ;MAIAnB,OAAO,CAACC,GAAG,CAACgB,UAAU,CAAC;MACvBjB,OAAO,CAACC,GAAG,CAACiB,OAAO,CAAC;MACpB;MACA;IACJ;EACJ,CAAC;EACD,oBACI1B,OAAA,CAACC,OAAO,CAAC4C,QAAQ;IAACC,KAAK,EAAE,MAAO;IAAA3C,QAAA,EACvBA;EAAQ;IAAA4C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAE3B;AAAC9C,EAAA,CA1HeF,SAAS;EAAA,QACTR,WAAW,EAQXE,WAAW;AAAA;AAAAuD,EAAA,GATXjD,SAAS;AA4HzB,SAASiB,SAASA,CAAEiC,IAAI,EAAE;EACtB,IAAIN,KAAK,GAAGO,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,SAAS,GAAGH,IAAI,GAAG,eAAe,CAAC;EACrE,OAAON,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;AAClC;AAAC;AAAC,IAAAK,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}