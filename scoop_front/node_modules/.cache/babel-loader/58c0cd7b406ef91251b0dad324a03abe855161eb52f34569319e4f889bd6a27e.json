{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\scoop\\\\scoop_front\\\\src\\\\Connector.jsx\",\n  _s = $RefreshSig$();\nimport { Children, createContext, useActionState, useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { useNavigate, useSearchParams, useLocation } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext(null);\nexport function Connector({\n  children\n}) {\n  _s();\n  const REST = process.env.REACT_APP_RESTURL;\n  const nav = useNavigate();\n  const [messageQueue, setMessageQueue] = useState({});\n  const [serverQueue, setServerQueue] = useState({});\n  const [roomQueue, setRoomQueue] = useState({});\n  const [accessToken, setAccessToken] = useState({});\n  const [wsConnected, setWsConnected] = useState(false);\n  const [subChannel, setSubChannel] = useState({});\n  const [onLineFriend, setOnLineFriend] = useState([]);\n  const [userName, setUserName] = useState(\"\");\n  const socRef = useRef();\n  useEffect(() => {}, []);\n  const loc = useLocation();\n  // /login이 아닐때 페이지 이동마다 로그인 검증\n  useEffect(() => {\n    if (!(loc.pathname == \"/login\" || loc.pathname == \"/register\" || loc.pathname == \"/find-password\")) {\n      verifyLogin();\n      console.log(\"navigating...\" + Math.random() + loc.pathname);\n    }\n  }, [loc]);\n  useEffect(() => {\n    console.log(onLineFriend);\n  }, [onLineFriend]);\n  useEffect(() => {\n    console.log(messageQueue);\n  }, [messageQueue]);\n  useEffect(() => {\n    console.log(subChannel);\n  }, [subChannel]);\n  useEffect(() => {\n    console.log(JSON.stringify(accessToken) + 2);\n    if (wsConnected !== true) {\n      ConnectWs();\n    }\n  }, [accessToken]);\n\n  //서버\n  function getServerByUser(id) {\n    if (socRef.current) {\n      axios(`https://${REST}/api/getServers`, {\n        method: \"post\",\n        params: {\n          id: id\n        },\n        withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n      }).then(res => {\n        console.log(res);\n        setRoomQueue(prev => {\n          let data = res.data;\n          return {\n            ...prev,\n            [id]: res.data\n          };\n          //return {[message.data[\"channel\"]] : message.data};\n        });\n        return;\n      }).catch(err => {\n        console.log(err);\n        return;\n      });\n    }\n    return;\n  }\n  const ConnectWs = () => {\n    console.log(accessToken + \"토큰\");\n    console.log(JSON.stringify(accessToken));\n    console.log(accessToken.name);\n    if (wsConnected !== true && JSON.stringify(accessToken) !== \"{}\") {\n      socRef.current = new WebSocket(`wss://${REST}/gateway`);\n      socRef.current.onopen = () => {\n        console.log(accessToken);\n        console.log(socRef.current.readyState);\n        setWsConnected(true);\n        getServerByUser(1);\n        socRef.current.send(JSON.stringify({\n          \"type\": \"ENTER_APP\",\n          \"writer\": accessToken.sub,\n          // accessToken의 변수가 들어갈 자리\n          \"text\": \"Connected\"\n        }));\n      };\n      function onMessage(msg) {\n        setMessageQueue(prev => {\n          console.log(msg);\n          const data = JSON.parse(msg);\n          let channel = data.chatroomID;\n          let writer = data.userName;\n          let message = data.text;\n          console.log(msg.userName + 'zz' + writer + channel + message);\n          if (prev[channel]) {\n            console.log(\"메세지 채널 큐 있음\" + channel);\n            return {\n              ...prev,\n              [channel]: [...prev[channel], data]\n            };\n          } else {\n            return {\n              ...prev,\n              [channel]: [data]\n            };\n          }\n          //return {[message.data[\"channel\"]] : message.data};\n        });\n      }\n      function onFriend(msg) {\n        setOnLineFriend(prev => {\n          const data = JSON.parse(msg);\n          console.log(data);\n          let id = data.id;\n          if (data.in === true) {\n            return [...prev, data.id];\n          } else {\n            return prev.filter(item => item !== data.id);\n          }\n          //return {[message.data[\"channel\"]] : message.data};\n        });\n      }\n      socRef.current.onmessage = msg => {\n        const message = msg;\n        try {\n          console.log(JSON.parse(msg.data).type);\n          switch (JSON.parse(msg.data).type) {\n            case \"MESSAGE\":\n              onMessage(message.data);\n              break;\n            case \"FRIENDINOUT\":\n              onFriend(message.data);\n              console.log('친구 이벤트');\n              break;\n          }\n        } catch {\n          console.log(msg);\n        }\n        socRef.current.send(JSON.stringify({\n          \"type\": \"RECEIVED\",\n          \"writer\": accessToken.name\n        }));\n      };\n      socRef.current.onclose = () => {\n        console.log(\"discon\");\n        setWsConnected(false);\n        socRef.current.send(JSON.stringify({\n          \"type\": \"EXIT_APP\",\n          \"writer\": accessToken.sub,\n          // accessToken의 변수가 들어갈 자리\n          \"text\": \"Connected\"\n        }));\n        socRef.current = null;\n      };\n    }\n  };\n\n  //로그인 검증 함수\n  const verifyLogin = () => {\n    const temptok = localStorage.getItem(\"logintoken\");\n    if (temptok != undefined) {\n      setAccessToken(jwtDecode(temptok));\n    }\n    const exp = Math.floor(Date.now() / 1000); // 현재시간\n    let decoded;\n    const getAcc = () => {\n      console.log(\"유효기간 끝남\");\n      localStorage.removeItem(\"logintoken\");\n      const doLogin = () => {\n        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n        axios(`https://${REST}/api/RefreshAccess`, {\n          method: \"get\",\n          params: {},\n          withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청      \n        }).then(res => {\n          console.log(res);\n          const token = res.headers['authorization'].split(' ')[1];\n          localStorage.setItem('logintoken', token);\n          setAccessToken(jwtDecode(token));\n          console.log(\"엑세스 재발급 완료.\" + token);\n        }).catch(err => {\n          localStorage.removeItem('logintoken');\n          console.log(\"재시작\");\n          if (socRef !== null && socRef !== void 0 && socRef.current) {\n            if (socRef.current.readyState === WebSocket.OPEN) {\n              socRef.current.close();\n            }\n          }\n          nav(\"/login\");\n          return;\n          console.log(err.response);\n        });\n      };\n      doLogin();\n    };\n    if (temptok != null) {\n      decoded = jwtDecode(temptok);\n      if (decoded.exp < exp) {\n        getAcc();\n        return;\n      }\n      const doVerify = () => {\n        //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\n        axios(`https://${REST}/api/VerifyAccess`, {\n          method: \"get\",\n          params: {\n            key: temptok\n          },\n          withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n        }).then(res => {\n          console.log(\"유효한 토큰입니다.\");\n        }).catch(err => {\n          console.log(\"가짜 토큰입니다.\");\n          localStorage.removeItem('logintoken');\n          getAcc();\n          return;\n        });\n      };\n      doVerify();\n    } else {\n      getAcc();\n      return;\n    }\n    //axios(\"주소\", 토큰)     : 백엔드 유효 검증\n    return true;\n  };\n  const sendRegister = id => {\n    if (socRef.current) {\n      socRef.current.send(JSON.stringify({\n        \"type\": \"ENTER_CHANNEL\",\n        \"channel_id\": id,\n        \"writer\": accessToken.name\n      }));\n      axios(`https://${REST}/api/getmessage`, {\n        method: \"post\",\n        params: {\n          id: id\n        },\n        withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n      }).then(res => {\n        console.log(res);\n        setMessageQueue(prev => {\n          let data = res.data;\n          return {\n            ...prev,\n            [id]: res.data\n          };\n\n          //return {[message.data[\"channel\"]] : message.data};\n        });\n        return;\n      }).catch(err => {\n        console.log(err);\n        return;\n      });\n    }\n  };\n  const sendMessage = (Message, id) => {\n    console.log(accessToken.sub);\n    socRef.current.send(JSON.stringify({\n      \"type\": \"SEND_MESSAGE\",\n      \"channel_id\": id,\n      \"writer\": accessToken.name,\n      \"text\": Message,\n      \"userId\": accessToken.sub\n    }));\n  };\n  // 채널 , 유저 \n  const Sub = channel => {\n    console.log(\"섭\");\n    const user = accessToken.sub;\n    setSubChannel(temp => {\n      var _temp$channel;\n      return {\n        // 기존 채널 => \n        ...temp,\n        // 기존채널 배열\n        [channel]: (_temp$channel = temp[channel]) !== null && _temp$channel !== void 0 && _temp$channel.includes(user) ? temp[channel] : [...(temp[channel] || []), {\n          user: user,\n          textQueue: \"text\"\n        }]\n      };\n    });\n  };\n  const unSub = channel => {\n    const user = accessToken.sub;\n    setSubChannel(prev => {\n      var _prev$channel;\n      return {\n        ...prev,\n        [channel]: ((_prev$channel = prev[channel]) === null || _prev$channel === void 0 ? void 0 : _prev$channel.filter(cb => cb !== user)) || []\n      };\n    });\n  };\n  const getServerByChannel = id => {\n    // 서버 구독\n    if (socRef.current) {\n      axios(`https://${REST}/api/getchatrooms`, {\n        method: \"post\",\n        params: {\n          id: id\n        },\n        withCredentials: true // 쿠키 및 인증 헤더를 포함하여 요청\n      }).then(res => {\n        console.log(res);\n        setServerQueue(prev => {\n          let data = res.data;\n          return {\n            ...prev,\n            [id]: res.data\n          };\n          //return {[message.data[\"channel\"]] : message.data};\n        });\n        return;\n      }).catch(err => {\n        console.log(err);\n        return;\n      });\n    }\n    return;\n  };\n  const setReceived = id => {\n    return;\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      sendMessage,\n      getServerByChannel,\n      serverQueue,\n      sendRegister,\n      Sub,\n      unSub,\n      setReceived,\n      messageQueue,\n      wsConnected,\n      accessToken,\n      onLineFriend,\n      getServerByUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 13\n  }, this);\n}\n_s(Connector, \"kNIuOgl8Mc5hHK9I6s6rr5azgHg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Connector;\nfunction getCookie(name) {\n  var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\n  console.log(value + \"qoffb\");\n  return value ? value[2] : null;\n}\n;\nvar _c;\n$RefreshReg$(_c, \"Connector\");","map":{"version":3,"names":["Children","createContext","useActionState","useContext","useEffect","useReducer","useRef","useState","useNavigate","useSearchParams","useLocation","jwtDecode","axios","jsxDEV","_jsxDEV","Context","Connector","children","_s","REST","process","env","REACT_APP_RESTURL","nav","messageQueue","setMessageQueue","serverQueue","setServerQueue","roomQueue","setRoomQueue","accessToken","setAccessToken","wsConnected","setWsConnected","subChannel","setSubChannel","onLineFriend","setOnLineFriend","userName","setUserName","socRef","loc","pathname","verifyLogin","console","log","Math","random","JSON","stringify","ConnectWs","getServerByUser","id","current","method","params","withCredentials","then","res","prev","data","catch","err","name","WebSocket","onopen","readyState","send","sub","onMessage","msg","parse","channel","chatroomID","writer","message","text","onFriend","in","filter","item","onmessage","type","onclose","temptok","localStorage","getItem","undefined","exp","floor","Date","now","decoded","getAcc","removeItem","doLogin","token","headers","split","setItem","OPEN","close","response","doVerify","key","sendRegister","sendMessage","Message","Sub","user","temp","_temp$channel","includes","textQueue","unSub","_prev$channel","cb","getServerByChannel","setReceived","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","getCookie","document","cookie","match","$RefreshReg$"],"sources":["C:/Users/USER/Documents/GitHub/scoop/scoop_front/src/Connector.jsx"],"sourcesContent":["    import { Children, createContext, useActionState, useContext, useEffect, useReducer, useRef, useState } from \"react\";\r\n    import { useNavigate, useSearchParams,useLocation } from \"react-router-dom\";\r\n    import {jwtDecode} from \"jwt-decode\";\r\n    import axios from \"axios\";\r\n\r\n    export const Context = createContext(null);\r\n\r\n    export function Connector({children}){\r\n        const REST = process.env.REACT_APP_RESTURL;\r\n        const nav = useNavigate();\r\n        const [messageQueue, setMessageQueue] = useState({});\r\n        const [serverQueue, setServerQueue] = useState({});\r\n        const [roomQueue, setRoomQueue] = useState({});\r\n        const [accessToken, setAccessToken] = useState({});    \r\n        const [wsConnected, setWsConnected] = useState(false);\r\n        const [subChannel, setSubChannel] = useState({});\r\n        const [onLineFriend, setOnLineFriend] = useState([]);\r\n        const [userName,setUserName] = useState(\"\");\r\n        const socRef = useRef();\r\n        \r\n        useEffect(() => {\r\n        },[] )\r\n        const loc = useLocation();\r\n        // /login이 아닐때 페이지 이동마다 로그인 검증\r\n        useEffect(()=>{\r\n            if(!(loc.pathname ==\"/login\" || loc.pathname == \"/register\" || loc.pathname == \"/find-password\")){\r\n                verifyLogin();\r\n                console.log(\"navigating...\" + Math.random() + loc.pathname);\r\n            }\r\n        },[loc])\r\n\r\n        useEffect(()=>{\r\n\r\n                console.log(onLineFriend);\r\n            \r\n        },[onLineFriend])\r\n        useEffect(()=>{\r\n            console.log(messageQueue);\r\n        },[messageQueue])\r\n        useEffect( () => {\r\n            console.log(subChannel);\r\n        },[subChannel])\r\n        useEffect(() => { \r\n            console.log(JSON.stringify(accessToken)+2);\r\n            if(wsConnected !== true){\r\n                ConnectWs();\r\n            }\r\n        }, [accessToken])\r\n\r\n        //서버\r\n        function getServerByUser(id){\r\n            if(socRef.current){\r\n                axios(`https://${REST}/api/getServers`, {\r\n                    method : \"post\",\r\n                    params : {\r\n                        id: id,\r\n                    },\r\n                    withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                }).then((res) => { \r\n                        console.log(res);\r\n                        setRoomQueue((prev) => \r\n                            {\r\n                                let data = res.data;\r\n                                return { ...prev,\r\n                                        [id] : res.data\r\n                                }\r\n                                //return {[message.data[\"channel\"]] : message.data};\r\n                            }\r\n                        );\r\n                        return;\r\n                }).catch((err) => { \r\n                        console.log(err);\r\n                        return;\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        const ConnectWs = () => {\r\n            console.log(accessToken + \"토큰\");\r\n            console.log(JSON.stringify(accessToken));\r\n            console.log(accessToken.name);\r\n            if(wsConnected !== true && JSON.stringify(accessToken) !== \"{}\")\r\n            {\r\n                socRef.current = new WebSocket(`wss://${REST}/gateway`);\r\n\r\n                socRef.current.onopen = () => {\r\n                console.log(accessToken);\r\n                console.log(socRef.current.readyState);\r\n                setWsConnected(true);\r\n                getServerByUser(1);\r\n                socRef.current.send(JSON.stringify({\r\n                    \"type\" : \"ENTER_APP\",\r\n                    \"writer\" : accessToken.sub, // accessToken의 변수가 들어갈 자리\r\n                    \"text\" : \"Connected\",\r\n                    \r\n                }));\r\n            }\r\n            function onMessage(msg){\r\n                setMessageQueue((prev) => \r\n                    {\r\n                        console.log(msg);\r\n                        const data = JSON.parse(msg);\r\n                        let channel = data.chatroomID;\r\n                        let writer = data.userName;\r\n                        let message = data.text;\r\n                        console.log(msg.userName + 'zz' + writer + channel  + message);\r\n                        if(prev[channel])\r\n                        {\r\n                            console.log(\"메세지 채널 큐 있음\" + channel)\r\n                            return { ...prev,\r\n                                [channel] : [ ...prev[channel], data]\r\n                            }   \r\n                        }\r\n                        else{\r\n                            return { ...prev,\r\n                                    [channel] : [data]\r\n                            }\r\n                        }\r\n                        //return {[message.data[\"channel\"]] : message.data};\r\n                       \r\n                    }\r\n                );\r\n            }\r\n\r\n            function onFriend(msg){\r\n                setOnLineFriend((prev) => \r\n                    {\r\n                        const data = JSON.parse(msg);\r\n                        console.log(data);\r\n                        let id = data.id;\r\n                        if(data.in === true)\r\n                        {\r\n                            return [...prev,data.id]\r\n                        }\r\n                        else{\r\n                            return prev.filter(item => item !== data.id);\r\n                        }\r\n                        //return {[message.data[\"channel\"]] : message.data};\r\n                       \r\n                    }\r\n                );\r\n            }\r\n            socRef.current.onmessage = (msg) => {\r\n                const message = msg\r\n                try{\r\n                    console.log(JSON.parse(msg.data).type);\r\n                    switch(JSON.parse(msg.data).type){\r\n                        case \"MESSAGE\":\r\n                            onMessage(message.data);\r\n                            break;  \r\n                        case \"FRIENDINOUT\":\r\n                            onFriend(message.data);\r\n                            console.log('친구 이벤트');\r\n                            break;\r\n                    }\r\n                }\r\n                catch{\r\n                    console.log(msg);\r\n                }\r\n            \r\n        \r\n                socRef.current.send(JSON.stringify({\r\n                    \"type\" : \"RECEIVED\",\r\n                    \"writer\" : accessToken.name,\r\n                }))\r\n            }   \r\n            socRef.current.onclose = () => {\r\n                console.log(\"discon\");\r\n                setWsConnected(false);\r\n                socRef.current.send(JSON.stringify({\r\n                    \"type\" : \"EXIT_APP\",\r\n                    \"writer\" : accessToken.sub, // accessToken의 변수가 들어갈 자리\r\n                    \"text\" : \"Connected\",\r\n                    \r\n                }));\r\n                socRef.current = null;\r\n                \r\n            }\r\n            }\r\n        }\r\n\r\n        //로그인 검증 함수\r\n        const verifyLogin = () =>\r\n        {\r\n            const temptok = localStorage.getItem(\"logintoken\");  \r\n            if(temptok != undefined){\r\n                    setAccessToken(jwtDecode(temptok));\r\n            }\r\n                const exp = Math.floor(Date.now() / 1000); // 현재시간\r\n                let decoded;\r\n\r\n                const getAcc = () => {\r\n                    console.log(\"유효기간 끝남\");\r\n                    localStorage.removeItem(\"logintoken\");\r\n                        const doLogin = () => {\r\n                            //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                                axios(`https://${REST}/api/RefreshAccess`, {\r\n                                    method : \"get\",\r\n                                    params : {},\r\n                                    withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청      \r\n                                }).then((res) => {  \r\n                                        console.log(res);\r\n                                        const token = res.headers['authorization'].split(' ')[1];\r\n                                        localStorage.setItem('logintoken', token);\r\n                                        setAccessToken(jwtDecode(token));\r\n                                        console.log(\"엑세스 재발급 완료.\" + token);\r\n                                }).catch((err) => { \r\n                                        localStorage.removeItem('logintoken');\r\n                                        console.log(\"재시작\");  \r\n                                        if(socRef?.current){\r\n                                            if(socRef.current.readyState === WebSocket.OPEN){\r\n                                                socRef.current.close();\r\n                                            }\r\n                                        }\r\n                                        nav(\"/login\");\r\n                                        return;\r\n                                    \r\n                                    console.log(err.response);\r\n                                });\r\n                            }\r\n                            doLogin();\r\n                    }\r\n                \r\n\r\n                if(temptok != null){\r\n                        decoded = jwtDecode(temptok);               \r\n                        if(decoded.exp < exp)\r\n                        {        \r\n                            getAcc();\r\n                            return;\r\n                        }\r\n                        const doVerify = () => {\r\n                            //axios로 로그인 요청, const trylogin = true일때 실행 X, response not ok면 다시 trylogin = false;, ok면 JWT 생성하고 메인으로 이동\r\n                                axios(`https://${REST}/api/VerifyAccess`, {\r\n                                    method : \"get\",\r\n                                    params : {\r\n                                        key: temptok,\r\n                                    },\r\n                                    withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                        \r\n                                }).then((res) => { \r\n                                        console.log(\"유효한 토큰입니다.\");\r\n                                }).catch((err) => { \r\n                                        console.log(\"가짜 토큰입니다.\");\r\n                                        localStorage.removeItem('logintoken');\r\n                                        getAcc();\r\n                                        return;\r\n                                });\r\n                            }\r\n                            doVerify();\r\n                }\r\n                else{\r\n                    getAcc();\r\n                    return;\r\n                }\r\n                //axios(\"주소\", 토큰)     : 백엔드 유효 검증\r\n                return true; \r\n            }\r\n            \r\n            const sendRegister = (id) => {\r\n                if(socRef.current){\r\n                    socRef.current.send(JSON.stringify({\r\n                        \"type\" : \"ENTER_CHANNEL\",\r\n                        \"channel_id\" : id,\r\n                        \"writer\" : accessToken.name,\r\n                    }))\r\n                    axios(`https://${REST}/api/getmessage`, {\r\n                        method : \"post\",\r\n                        params : {\r\n                            id: id,\r\n                        },\r\n                        withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                    }).then((res) => { \r\n                            console.log(res);\r\n                            setMessageQueue((prev) => \r\n                                {\r\n                                    let data = res.data;\r\n                                    return { ...prev,\r\n                                            [id] : res.data\r\n                                    }\r\n                                    \r\n                                    //return {[message.data[\"channel\"]] : message.data};\r\n\r\n                                }\r\n                            );\r\n                            return;\r\n                    }).catch((err) => { \r\n                            console.log(err);\r\n                            return;\r\n                    });\r\n                }\r\n            }\r\n            const sendMessage = (Message, id) => {\r\n                console.log(accessToken.sub);\r\n                socRef.current.send(JSON.stringify({\r\n                    \"type\" : \"SEND_MESSAGE\",\r\n                    \"channel_id\" : id,\r\n                    \"writer\" : accessToken.name,\r\n                    \"text\" : Message,\r\n                    \"userId\" : accessToken.sub\r\n                }))            \r\n            }\r\n                                    // 채널 , 유저 \r\n        const Sub = (channel) => {\r\n            console.log(\"섭\")\r\n            const user = accessToken.sub;\r\n            setSubChannel(temp => ({ // 기존 채널 => \r\n                    ...temp, // 기존채널 배열\r\n                    [channel] : temp[channel]?.includes(user)\r\n                    ? temp[channel] \r\n                    : [...(temp[channel] || []), {user:user, textQueue:\"text\"}]\r\n                })\r\n            )\r\n\r\n        }\r\n        const unSub = (channel) => {\r\n            const user = accessToken.sub;\r\n            setSubChannel(prev => ({\r\n                ...prev,\r\n                [channel]: prev[channel]?.filter(cb => cb !== user) || [],\r\n            }));\r\n        };\r\n        const getServerByChannel = (id) => { // 서버 구독\r\n            if(socRef.current){\r\n                axios(`https://${REST}/api/getchatrooms`, {\r\n                    method : \"post\",\r\n                    params : {\r\n                        id: id,\r\n                    },\r\n                    withCredentials: true  // 쿠키 및 인증 헤더를 포함하여 요청\r\n                }).then((res) => { \r\n                        console.log(res);\r\n                        setServerQueue((prev) => \r\n                            {\r\n                                let data = res.data;\r\n                                return { ...prev,\r\n                                        [id] : res.data\r\n                                }\r\n                                //return {[message.data[\"channel\"]] : message.data};\r\n                            }\r\n                        );\r\n                        return;\r\n                }).catch((err) => { \r\n                        console.log(err);\r\n                        return;\r\n                });\r\n            }\r\n            return;\r\n        }\r\n         const setReceived = (id) => {\r\n            return\r\n         };\r\n        return (\r\n            <Context.Provider value={{sendMessage,getServerByChannel,serverQueue,sendRegister,Sub,unSub,setReceived,messageQueue,wsConnected,accessToken,onLineFriend, getServerByUser}}>\r\n                    {children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n\r\n\r\n    function getCookie(name) {\r\n        var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');\r\n        console.log(value+\"qoffb\");\r\n        return value ? value[2] : null;\r\n    };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}